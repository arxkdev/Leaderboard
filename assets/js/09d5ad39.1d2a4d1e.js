"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>y});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var i=r.createContext({}),s=function(e){var n=r.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),c=s(a),m=t,y=c["".concat(i,".").concat(m)]||c[m]||p[m]||o;return a?r.createElement(y,l(l({ref:n},u),{},{components:a})):r.createElement(y,l({ref:n},u))}));function y(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=m;var d={};for(var i in n)hasOwnProperty.call(n,i)&&(d[i]=n[i]);d.originalType=e,d[c]="string"==typeof e?e:t,l[1]=d;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},84381:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=a(87462),t=(a(67294),a(3905));const o={sidebar_position:3},l="Examples",d={unversionedId:"examples",id:"examples",title:"Examples",description:"Automated Example:",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/Leaderboard/docs/examples",draft:!1,editUrl:"https://github.com/arxkdev/Leaderboard/edit/main/docs/examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Features",permalink:"/Leaderboard/docs/features"},next:{title:"Classes",permalink:"/Leaderboard/docs/classes"}},i={},s=[{value:"Automated Example:",id:"automated-example",level:3},{value:"Non-Automated Example:",id:"non-automated-example",level:3},{value:"Rolling Leaderboard Example:",id:"rolling-leaderboard-example",level:3}],u={toc:s},c="wrapper";function p(e){let{components:n,...a}=e;return(0,t.kt)(c,(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"examples"},"Examples"),(0,t.kt)("h3",{id:"automated-example"},"Automated Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\n\nlocal Key = 1; -- The key for the leaderboard (change to reset)\nlocal LeaderboardTypes = { -- You must provide keys for the individual boards\n    ["Hourly"] = `Hourly-{Key}`,\n    ["Daily"] = `Daily-{Key}`,\n    ["Weekly"] = `Weekly-{Key}`,\n    ["Monthly"] = `Monthly-{Key}`,\n    ["AllTime"] = `AllTime-{Key}`,\n};\nlocal MoneyLeaderboard = Leaderboard.new(LeaderboardTypes, {\n    -- Settings\n    Automation = true,\n    Interval = 5,\n    RecordCount = 100, -- You can also do {Daily = 50, Weekly = 50, Monthly = 50, AllTime = 100}\n})\n\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\nend\n\nMoneyLeaderboard.Updated:Connect(function(boards)\n    -- This is where you would update the leaderboard GUI\n    -- Returns us a table of all the boards that were updated\n    for _, board in boards do\n        print(`Updating board {board.Type} - with {#board.Data} items!`);\n    end;\nend)\n')),(0,t.kt)("h3",{id:"non-automated-example"},"Non-Automated Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\n\nlocal INTERVAL = 120; -- 2 minutes\nlocal RECORD_COUNT = 100; -- Amount of records to get per board\n\nlocal Key = 1; -- The key for the leaderboard (change to reset)\nlocal LeaderboardTypes = { -- You must provide keys for the individual boards\n    ["Hourly"] = `Hourly-{Key}`,\n    ["Daily"] = `Daily-{Key}`,\n    ["Weekly"] = `Weekly-{Key}`,\n    ["Monthly"] = `Monthly-{Key}`,\n    ["AllTime"] = `AllTime-{Key}`,\n};\nlocal MoneyLeaderboard = Leaderboard.new(LeaderboardTypes);\n\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\nend\n\nlocal function UpdateLeaderboards()\n    -- Add the value to the data\n    for _, Player in Players:GetPlayers() do\n        FunctionToIncrementMoney(Player.UserId, 100);\n    end;\n\n    -- Retrieve the data\n    MoneyLeaderboard:GetRecords("All", RECORD_COUNT):andThen(function(data)\n        -- This is where you would update the leaderboard GUI\n        -- Returns us a table of all the boards that were updated\n        for _, board in data do\n            print(`Updating board {board.Type} - with {#board.Data} items!`);\n        end;\n    end);\nend\n\ntask.spawn(function()\n    while (true) do\n        UpdateLeaderboards();\n        task.wait(INTERVAL);\n    end;\nend)\n')),(0,t.kt)("h3",{id:"rolling-leaderboard-example"},"Rolling Leaderboard Example:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-lua"},'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\n\nlocal Key = 1; -- The key for the leaderboard (change to reset)\nlocal Leaderboards = {\n    ["AllTime"] = `AllTime-{Key}`,\n    ["10MinutesRolling"] = {60 * 10, `10MinutesRolling-{Key}`}, -- 10 minutes rolling leaderboard\n    ["15MinutesRolling"] = {60 * 15, `15MinutesRolling-{Key}`}, -- 15 minutes rolling leaderboard\n    ["1MinuteRolling"] = {60, `1MinuteRolling-{Key}`}, -- 1 minute rolling leaderboard\n};\nlocal MoneyLeaderboard = Leaderboard.new(Leaderboards, {\n    Automation = true,\n    Interval = 15,\n    RecordCount = 100, -- You can also do {Daily = 50, Weekly = 50, Monthly = 50, AllTime = 100}\n});\n\nlocal function IncrementMoneyTest()\n    -- Test userIds\n    local FakeId1, FakeId2 = 100, 101;\n    MoneyLeaderboard:IncrementValues(Leaderboards, FakeId1, 100);\n    MoneyLeaderboard:IncrementValues(Leaderboards, FakeId2, 100);\nend\nIncrementMoneyTest();\n\nMoneyLeaderboard.Updated:Connect(function(boards)\n    -- Returns us a table of all the boards that were updated\n    for _, board in boards do\n        print(`Updating board {board.Type} - with {#board.Data} items!`);\n    end;\nend);\n')))}p.isMDXComponent=!0}}]);