"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{3973:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>d,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"examples","title":"Examples","description":"Automated Example:","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/Leaderboard/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/arxkdev/Leaderboard/edit/main/docs/examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Features","permalink":"/Leaderboard/docs/features"},"next":{"title":"Classes","permalink":"/Leaderboard/docs/classes"}}');var o=n(4848),t=n(8453);const d={sidebar_position:3},l="Examples",s={},i=[{value:"Automated Example:",id:"automated-example",level:3},{value:"Non-Automated Example:",id:"non-automated-example",level:3},{value:"Rolling Leaderboard Example:",id:"rolling-leaderboard-example",level:3}];function u(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"examples",children:"Examples"})}),"\n",(0,o.jsx)(r.h3,{id:"automated-example",children:"Automated Example:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\r\n\r\nlocal Key = 1; -- The key for the leaderboard (change to reset)\r\nlocal LeaderboardTypes = { -- You must provide keys for the individual boards\r\n\t["Hourly"] = `Hourly-{Key}`,\r\n\t["Daily"] = `Daily-{Key}`,\r\n\t["Weekly"] = `Weekly-{Key}`,\r\n\t["Monthly"] = `Monthly-{Key}`,\r\n\t["AllTime"] = `AllTime-{Key}`,\r\n};\r\nlocal MoneyLeaderboard = Leaderboard.new(LeaderboardTypes, {\r\n    -- Settings\r\n    Automation = true,\r\n    Interval = 5,\r\n    RecordCount = 100, -- You can also do {Daily = 50, Weekly = 50, Monthly = 50, AllTime = 100}\r\n})\r\n\r\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\r\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\r\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\r\nend\r\n\r\nMoneyLeaderboard.Updated:Connect(function(boards)\r\n    -- This is where you would update the leaderboard GUI\r\n    -- Returns us a table of all the boards that were updated\r\n    for _, board in boards do\r\n        print(`Updating board {board.Type} - with {#board.Data} items!`);\r\n    end;\r\nend)\n'})}),"\n",(0,o.jsx)(r.h3,{id:"non-automated-example",children:"Non-Automated Example:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\r\n\r\nlocal INTERVAL = 120; -- 2 minutes\r\nlocal RECORD_COUNT = 100; -- Amount of records to get per board\r\n\r\nlocal Key = 1; -- The key for the leaderboard (change to reset)\r\nlocal LeaderboardTypes = { -- You must provide keys for the individual boards\r\n    ["Hourly"] = `Hourly-{Key}`,\r\n    ["Daily"] = `Daily-{Key}`,\r\n    ["Weekly"] = `Weekly-{Key}`,\r\n    ["Monthly"] = `Monthly-{Key}`,\r\n    ["AllTime"] = `AllTime-{Key}`,\r\n};\r\nlocal MoneyLeaderboard = Leaderboard.new(LeaderboardTypes);\r\n\r\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\r\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\r\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\r\nend\r\n\r\nlocal function UpdateLeaderboards()\r\n    -- Add the value to the data\r\n    for _, Player in Players:GetPlayers() do\r\n        FunctionToIncrementMoney(Player.UserId, 100);\r\n    end;\r\n\r\n    -- Retrieve the data\r\n    MoneyLeaderboard:GetRecords("All", RECORD_COUNT):andThen(function(data)\r\n        -- This is where you would update the leaderboard GUI\r\n        -- Returns us a table of all the boards that were updated\r\n        for _, board in data do\r\n            print(`Updating board {board.Type} - with {#board.Data} items!`);\r\n        end;\r\n    end);\r\nend\r\n\r\ntask.spawn(function()\r\n    while (true) do\r\n        UpdateLeaderboards();\r\n        task.wait(INTERVAL);\r\n    end;\r\nend)\n'})}),"\n",(0,o.jsx)(r.h3,{id:"rolling-leaderboard-example",children:"Rolling Leaderboard Example:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-lua",children:'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard);\r\n\r\nlocal Key = 1; -- The key for the leaderboard (change to reset)\r\nlocal Leaderboards = {\r\n\t["AllTime"] = `AllTime-{Key}`,\r\n    ["10MinutesRolling"] = {60 * 10, `10MinutesRolling-{Key}`}, -- 10 minutes rolling leaderboard\r\n\t["15MinutesRolling"] = {60 * 15, `15MinutesRolling-{Key}`}, -- 15 minutes rolling leaderboard\r\n    ["1MinuteRolling"] = {60, `1MinuteRolling-{Key}`}, -- 1 minute rolling leaderboard\r\n};\r\nlocal MoneyLeaderboard = Leaderboard.new(Leaderboards, {\r\n\tAutomation = true,\r\n\tInterval = 15,\r\n\tRecordCount = 100, -- You can also do {Daily = 50, Weekly = 50, Monthly = 50, AllTime = 100}\r\n});\r\n\r\nlocal function IncrementMoneyTest()\r\n\t-- Test userIds\r\n\tlocal FakeId1, FakeId2 = 100, 101;\r\n\tMoneyLeaderboard:IncrementValues(Leaderboards, FakeId1, 100);\r\n\tMoneyLeaderboard:IncrementValues(Leaderboards, FakeId2, 100);\r\nend\r\nIncrementMoneyTest();\r\n\r\nMoneyLeaderboard.Updated:Connect(function(boards)\r\n\t-- Returns us a table of all the boards that were updated\r\n\tfor _, board in boards do\r\n\t\tprint(`Updating board {board.Type} - with {#board.Data} items!`);\r\n\tend;\r\nend);\n'})})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>l});var a=n(6540);const o={},t=a.createContext(o);function d(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);