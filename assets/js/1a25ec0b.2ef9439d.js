"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[672],{4910:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"features","title":"Features","description":"Intro","source":"@site/docs/features.md","sourceDirName":".","slug":"/features","permalink":"/Leaderboard/docs/features","draft":false,"unlisted":false,"editUrl":"https://github.com/arxkdev/Leaderboard/edit/main/docs/features.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"About","permalink":"/Leaderboard/docs/intro"},"next":{"title":"Examples","permalink":"/Leaderboard/docs/examples"}}');var n=i(4848),a=i(8453);const o={sidebar_position:2},s="Features",d={},l=[{value:"Intro",id:"intro",level:3},{value:"Sharding",id:"sharding",level:3},{value:"Exponential Backoff",id:"exponential-backoff",level:3},{value:"Other",id:"other",level:3}];function c(e){const t={a:"a",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"features",children:"Features"})}),"\n",(0,n.jsx)(t.h3,{id:"intro",children:"Intro"}),"\n",(0,n.jsx)(t.p,{children:"The foundation of this library is built upon the best practices recommended by Roblox, as listed here:"}),"\n",(0,n.jsx)(t.h3,{id:"sharding",children:"Sharding"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Shard_(database_architecture)",children:"https://en.wikipedia.org/wiki/Shard_(database_architecture)"})}),"\n",(0,n.jsx)(t.p,{children:"Leaderboard uses a custom sharding solution for MemoryStoreService to reduce the risk of hitting the size limits for a single Memory Map. This is done by splitting the data into multiple Memory Maps, and then using a custom hashing algorithm to determine which Memory Map to use for a given key."}),"\n",(0,n.jsx)(t.h3,{id:"exponential-backoff",children:"Exponential Backoff"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Exponential_backoff",children:"https://en.wikipedia.org/wiki/Exponential_backoff"})}),"\n",(0,n.jsx)(t.p,{children:"Leaderboard uses an exponential backoff algorithm to reduce the risk of hitting rate limits. This is done by waiting a certain amount of time before retrying a request, and then increasing the wait time exponentially for each retry."}),"\n",(0,n.jsx)(t.h3,{id:"other",children:"Other"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Abstract API for easy integration into your existing codebase"}),"\n",(0,n.jsx)(t.li,{children:"Customizable leaderboard settings"}),"\n",(0,n.jsx)(t.li,{children:"Leaderboard types: Hourly, Daily, Weekly, Monthly, All-Time and Yearly"}),"\n",(0,n.jsx)(t.li,{children:"A special Leaderboard type for Rolling Leaderboards which automatically reset at a given interval"}),"\n",(0,n.jsx)(t.li,{children:"Full type support"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>s});var r=i(6540);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);