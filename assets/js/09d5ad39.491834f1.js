"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>b});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,b=c["".concat(i,".").concat(m)]||c[m]||p[m]||o;return t?r.createElement(b,d(d({ref:n},s),{},{components:t})):r.createElement(b,d({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,d=new Array(o);d[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[c]="string"==typeof e?e:a,d[1]=l;for(var u=2;u<o;u++)d[u]=t[u];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},84381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:3},d="Examples",l={unversionedId:"examples",id:"examples",title:"Examples",description:"Automated Example:",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/Leaderboard/docs/examples",draft:!1,editUrl:"https://github.com/arxkdev/Leaderboard/edit/main/docs/examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Features",permalink:"/Leaderboard/docs/features"}},i={},u=[{value:"Automated Example:",id:"automated-example",level:3},{value:"Non-Automated Example:",id:"non-automated-example",level:3}],s={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"automated-example"},"Automated Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard)\n\nlocal Key = 1 -- The key for the leaderboard (change to reset)\nlocal LeaderboardTypes = {"Daily", "Weekly", "Monthly", "AllTime"}\nlocal MoneyLeaderboard = Leaderboard.new(`Money_{Key}`, LeaderboardTypes, {\n    -- Settings\n    Automation = true,\n    Interval = 5,\n    RecordCount = 100, -- You can also do {Daily = 50, Weekly = 50, Monthly = 50, AllTime = 100}\n})\n\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\nend\n\nMoneyLeaderboard.Updated:Connect(function(boards)\n    -- This is where you would update the leaderboard GUI\n    -- Returns us a table of all the boards that were updated\n    for _, board in boards do\n        print(`Updating board {board.Type} - with {#board.Data} items!`);\n    end;\nend)\n')),(0,a.kt)("h3",{id:"non-automated-example"},"Non-Automated Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Leaderboard = require(game:GetService("ReplicatedStorage").Leaderboard)\n\nlocal INTERVAL = 120; -- 2 minutes\nlocal RECORD_COUNT = 100; -- Amount of records to get per board\n\nlocal Key = 1 -- The key for the leaderboard (change to reset)\nlocal LeaderboardTypes = {"Daily", "Weekly", "Monthly", "AllTime"}\nlocal MoneyLeaderboard = Leaderboard.new(`Money_{Key}`, LeaderboardTypes)\n\nlocal function FunctionToIncrementMoney(userId: number, amount: number)\n    -- This is where you would give the user money, just add this line to increment the leaderboard aswell\n    MoneyLeaderboard:IncrementValues("All", userId, amount);\nend\n\nlocal function UpdateLeaderboards()\n    -- Add the value to the data\n    for _, Player in Players:GetPlayers() do\n        FunctionToIncrementMoney(Player.UserId, 100);\n    end;\n\n    -- Retrieve the data\n    MoneyLeaderboard:GetRecords("All", RECORD_COUNT):andThen(function(data)\n        -- This is where you would update the leaderboard GUI\n        -- Returns us a table of all the boards that were updated\n        for _, board in data do\n            print(`Updating board {board.Type} - with {#board.Data} items!`);\n        end;\n    end);\nend\n\ntask.spawn(function()\n    while (true) do\n        UpdateLeaderboards();\n        task.wait(INTERVAL);\n    end;\nend)\n')))}p.isMDXComponent=!0}}]);