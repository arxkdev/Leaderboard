"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var o=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(r),y=a,b=c["".concat(s,".").concat(y)]||c[y]||p[y]||n;return r?o.createElement(b,i(i({ref:t},u),{},{components:r})):o.createElement(b,i({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<n;d++)i[d]=r[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},59881:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var o=r(87462),a=(r(67294),r(3905));const n={sidebar_position:1},i="About",l={unversionedId:"intro",id:"intro",title:"About",description:"Leaderboard is an intuitive, open-source module designed to effortlessly establish and manage robust non-persistent & persistent global leaderboards for your Roblox experiences.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/Leaderboard/docs/intro",draft:!1,editUrl:"https://github.com/arxkdev/Leaderboard/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Features",permalink:"/Leaderboard/docs/features"}},s={},d=[{value:"What can I do with this?",id:"what-can-i-do-with-this",level:3},{value:"Why should I use this?",id:"why-should-i-use-this",level:3},{value:"Why not OrderedDataStore?",id:"why-not-ordereddatastore",level:3}],u={toc:d},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"about"},"About"),(0,a.kt)("p",null,"Leaderboard is an intuitive, open-source module designed to effortlessly establish and manage robust non-persistent & persistent global leaderboards for your Roblox experiences."),(0,a.kt)("h3",{id:"what-can-i-do-with-this"},"What can I do with this?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create leaderboards for your Roblox experiences"),(0,a.kt)("li",{parentName:"ul"},"Pick from a variety of leaderboard types such as ",(0,a.kt)("b",null,(0,a.kt)("i",null,"Hourly, Daily, Weekly, Monthly, All-Time and Yearly"))),(0,a.kt)("li",{parentName:"ul"},"Not have to worry about rate limits"),(0,a.kt)("li",{parentName:"ul"},"Not have to worry about messing with your PlayerData and setup a million hacky workarounds to store individual dated leaderboards"),(0,a.kt)("li",{parentName:"ul"},"Customize your leaderboard settings to your liking"),(0,a.kt)("li",{parentName:"ul"},"Use automation to automatically update your leaderboards"),(0,a.kt)("li",{parentName:"ul"},"Easily integrate into your existing codebase with the abstract API")),(0,a.kt)("h3",{id:"why-should-i-use-this"},"Why should I use this?"),(0,a.kt)("p",null,"Roblox developers often face challenges when implementing global leaderboards, particularly when dealing with various time periods. This library provides a streamlined solution, enabling you to create global leaderboards with just a few lines of code. Leaderboard supports different time periods, including All-Time, Monthly, Weekly, and Daily leaderboards. Additionally, it provides flexibility with a custom rolling time, allowing you to choose how long the leaderboard should display."),(0,a.kt)("h3",{id:"why-not-ordereddatastore"},"Why not OrderedDataStore?"),(0,a.kt)("p",null,"You should not be using ODS for non persistent data. It should be persistent data. For years there was a workaround to allow people to create Daily/Weekly/Monthly boards with ODS, a very hacky workaround, but now we have MemoryStoreService which is a much better solution for non persistent data."))}p.isMDXComponent=!0}}]);